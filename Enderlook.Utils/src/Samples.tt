<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".ignore.cs" #>
//====================================================================================================
// <auto-generated>       THIS IS AN AUTOGENERATED FILE. DO NOT EDIT MANUALLY       </auto-generated>
//====================================================================================================

using System.Collections.Generic;

namespace Enderlook.Utils
{
    public static partial class Samples
    {
<#
    Tuple<string, string, string, string>[] types = new Tuple<string, string, string, string>[]
    {
        new Tuple<string, string, string, string>("byte"        , "Bytes"       , "sbyte"       , "SBytes"),
        new Tuple<string, string, string, string>("ushort"      , "UShorts"     , "short"       , "Shorts"),
        new Tuple<string, string, string, string>("uint"        , "UInts"       , "int"         , "Ints"),
        new Tuple<string, string, string, string>("ulong"       , "ULongs"      , "long"        , "Longs"),
    };
    
    foreach (Tuple<string, string, string, string> item in types)
    {
        string typeU = item.Item1;
        string nameU = item.Item2;
        string typeS = item.Item3;
        string nameS = item.Item4;
#>
        /// <summary>
        /// Iterate from <see cref="<#= typeU #>.MinValue"/> to <see cref="<#= typeU #>.MaxValue"/>.
        /// </summary>
        public static IEnumerable<<#= typeU #>> <#= nameU #>PositivesWithZero {
            get {
                for (<#= typeU #> i = 0; i <= <#= typeU #>.MaxValue; i++)
                    yield return i;
            }
        }

        /// <summary>
        /// Iterate from 1 to <see cref="<#= typeU #>.MaxValue"/>.
        /// </summary>
        public static IEnumerable<<#= typeU #>> <#= nameU #>Positives {
            get {
                for (<#= typeU #> i = 1; i <= <#= typeU #>.MaxValue; i++)
                    yield return i;
            }
        }

        /// <summary>
        /// Iterate from <see cref="<#= typeS #>.MinValue"/> to <see cref="<#= typeS #>.MaxValue"/>.
        /// </summary>
        public static IEnumerable<<#= typeS #>> <#= nameS #>Positives {
            get {
                for (<#= typeS #> i = 1; i < <#= typeS #>.MaxValue; i++)
                    yield return i;
                yield return <#= typeS #>.MaxValue;
            }
        }

        /// <summary>
        /// Iterate from <see cref="<#= typeS #>.MinValue"/> to <see cref="<#= typeS #>.MaxValue"/>.
        /// </summary>
        public static IEnumerable<<#= typeS #>> <#= nameS #>PositivesWithZero {
            get {
                for (<#= typeS #> i = 0; i < <#= typeS #>.MaxValue; i++)
                    yield return i;
                yield return <#= typeS #>.MaxValue;
            }
        }

        /// <summary>
        /// Iterate from <see cref="<#= typeS #>.MinValue"/> to <see cref="<#= typeS #>.MaxValue"/>.
        /// </summary>
        public static IEnumerable<<#= typeS #>> <#= nameS #>WithNegatives {
            get {
                for (<#= typeS #> i = <#= typeS #>.MinValue; i < <#= typeS #>.MaxValue; i++)
                    yield return i;
                yield return <#= typeS #>.MaxValue;
            }
        }

        /// <summary>
        /// Iterate from -1 to <see cref="<#= typeS #>.MinValue"/>.
        /// </summary>
        public static IEnumerable<<#= typeS #>> <#= nameS #>Negatives {
            get {
                for (<#= typeS #> i = -1; i > <#= typeS #>.MinValue; i--)
                    yield return i;
            }
        }

        /// <summary>
        /// Iterate from 0 to <see cref="<#= typeS #>.MinValue"/>.
        /// </summary>
        public static IEnumerable<<#= typeS #>> <#= nameS #>NegativesWithZero {
            get {
                for (<#= typeS #> i = 0; i > <#= typeS #>.MinValue; i--)
                    yield return i;
            }
        }
<#  } #>
    }
}
