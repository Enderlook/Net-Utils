//====================================================================================================
// <auto-generated>       THIS IS AN AUTOGENERATED FILE. DO NOT EDIT MANUALLY       </auto-generated>
//====================================================================================================

using System.Collections.Generic;

namespace Enderlook.Utils
{
    public static partial class Samples
    {
        /// <summary>
        /// Iterate from <see cref="byte.MinValue"/> to <see cref="byte.MaxValue"/>.
        /// </summary>
        public static IEnumerable<byte> BytesPositivesWithZero {
            get {
                for (byte i = 0; i <= byte.MaxValue; i++)
                    yield return i;
            }
        }

        /// <summary>
        /// Iterate from 1 to <see cref="byte.MaxValue"/>.
        /// </summary>
        public static IEnumerable<byte> BytesPositives {
            get {
                for (byte i = 1; i <= byte.MaxValue; i++)
                    yield return i;
            }
        }

        /// <summary>
        /// Iterate from <see cref="sbyte.MinValue"/> to <see cref="sbyte.MaxValue"/>.
        /// </summary>
        public static IEnumerable<sbyte> SBytesPositives {
            get {
                for (sbyte i = 1; i < sbyte.MaxValue; i++)
                    yield return i;
                yield return sbyte.MaxValue;
            }
        }

        /// <summary>
        /// Iterate from <see cref="sbyte.MinValue"/> to <see cref="sbyte.MaxValue"/>.
        /// </summary>
        public static IEnumerable<sbyte> SBytesPositivesWithZero {
            get {
                for (sbyte i = 0; i < sbyte.MaxValue; i++)
                    yield return i;
                yield return sbyte.MaxValue;
            }
        }

        /// <summary>
        /// Iterate from <see cref="sbyte.MinValue"/> to <see cref="sbyte.MaxValue"/>.
        /// </summary>
        public static IEnumerable<sbyte> SBytesWithNegatives {
            get {
                for (sbyte i = sbyte.MinValue; i < sbyte.MaxValue; i++)
                    yield return i;
                yield return sbyte.MaxValue;
            }
        }

        /// <summary>
        /// Iterate from -1 to <see cref="sbyte.MinValue"/>.
        /// </summary>
        public static IEnumerable<sbyte> SBytesNegatives {
            get {
                for (sbyte i = -1; i > sbyte.MinValue; i--)
                    yield return i;
            }
        }

        /// <summary>
        /// Iterate from 0 to <see cref="sbyte.MinValue"/>.
        /// </summary>
        public static IEnumerable<sbyte> SBytesNegativesWithZero {
            get {
                for (sbyte i = 0; i > sbyte.MinValue; i--)
                    yield return i;
            }
        }
        /// <summary>
        /// Iterate from <see cref="ushort.MinValue"/> to <see cref="ushort.MaxValue"/>.
        /// </summary>
        public static IEnumerable<ushort> UShortsPositivesWithZero {
            get {
                for (ushort i = 0; i <= ushort.MaxValue; i++)
                    yield return i;
            }
        }

        /// <summary>
        /// Iterate from 1 to <see cref="ushort.MaxValue"/>.
        /// </summary>
        public static IEnumerable<ushort> UShortsPositives {
            get {
                for (ushort i = 1; i <= ushort.MaxValue; i++)
                    yield return i;
            }
        }

        /// <summary>
        /// Iterate from <see cref="short.MinValue"/> to <see cref="short.MaxValue"/>.
        /// </summary>
        public static IEnumerable<short> ShortsPositives {
            get {
                for (short i = 1; i < short.MaxValue; i++)
                    yield return i;
                yield return short.MaxValue;
            }
        }

        /// <summary>
        /// Iterate from <see cref="short.MinValue"/> to <see cref="short.MaxValue"/>.
        /// </summary>
        public static IEnumerable<short> ShortsPositivesWithZero {
            get {
                for (short i = 0; i < short.MaxValue; i++)
                    yield return i;
                yield return short.MaxValue;
            }
        }

        /// <summary>
        /// Iterate from <see cref="short.MinValue"/> to <see cref="short.MaxValue"/>.
        /// </summary>
        public static IEnumerable<short> ShortsWithNegatives {
            get {
                for (short i = short.MinValue; i < short.MaxValue; i++)
                    yield return i;
                yield return short.MaxValue;
            }
        }

        /// <summary>
        /// Iterate from -1 to <see cref="short.MinValue"/>.
        /// </summary>
        public static IEnumerable<short> ShortsNegatives {
            get {
                for (short i = -1; i > short.MinValue; i--)
                    yield return i;
            }
        }

        /// <summary>
        /// Iterate from 0 to <see cref="short.MinValue"/>.
        /// </summary>
        public static IEnumerable<short> ShortsNegativesWithZero {
            get {
                for (short i = 0; i > short.MinValue; i--)
                    yield return i;
            }
        }
        /// <summary>
        /// Iterate from <see cref="uint.MinValue"/> to <see cref="uint.MaxValue"/>.
        /// </summary>
        public static IEnumerable<uint> UIntsPositivesWithZero {
            get {
                for (uint i = 0; i <= uint.MaxValue; i++)
                    yield return i;
            }
        }

        /// <summary>
        /// Iterate from 1 to <see cref="uint.MaxValue"/>.
        /// </summary>
        public static IEnumerable<uint> UIntsPositives {
            get {
                for (uint i = 1; i <= uint.MaxValue; i++)
                    yield return i;
            }
        }

        /// <summary>
        /// Iterate from <see cref="int.MinValue"/> to <see cref="int.MaxValue"/>.
        /// </summary>
        public static IEnumerable<int> IntsPositives {
            get {
                for (int i = 1; i < int.MaxValue; i++)
                    yield return i;
                yield return int.MaxValue;
            }
        }

        /// <summary>
        /// Iterate from <see cref="int.MinValue"/> to <see cref="int.MaxValue"/>.
        /// </summary>
        public static IEnumerable<int> IntsPositivesWithZero {
            get {
                for (int i = 0; i < int.MaxValue; i++)
                    yield return i;
                yield return int.MaxValue;
            }
        }

        /// <summary>
        /// Iterate from <see cref="int.MinValue"/> to <see cref="int.MaxValue"/>.
        /// </summary>
        public static IEnumerable<int> IntsWithNegatives {
            get {
                for (int i = int.MinValue; i < int.MaxValue; i++)
                    yield return i;
                yield return int.MaxValue;
            }
        }

        /// <summary>
        /// Iterate from -1 to <see cref="int.MinValue"/>.
        /// </summary>
        public static IEnumerable<int> IntsNegatives {
            get {
                for (int i = -1; i > int.MinValue; i--)
                    yield return i;
            }
        }

        /// <summary>
        /// Iterate from 0 to <see cref="int.MinValue"/>.
        /// </summary>
        public static IEnumerable<int> IntsNegativesWithZero {
            get {
                for (int i = 0; i > int.MinValue; i--)
                    yield return i;
            }
        }
        /// <summary>
        /// Iterate from <see cref="ulong.MinValue"/> to <see cref="ulong.MaxValue"/>.
        /// </summary>
        public static IEnumerable<ulong> ULongsPositivesWithZero {
            get {
                for (ulong i = 0; i <= ulong.MaxValue; i++)
                    yield return i;
            }
        }

        /// <summary>
        /// Iterate from 1 to <see cref="ulong.MaxValue"/>.
        /// </summary>
        public static IEnumerable<ulong> ULongsPositives {
            get {
                for (ulong i = 1; i <= ulong.MaxValue; i++)
                    yield return i;
            }
        }

        /// <summary>
        /// Iterate from <see cref="long.MinValue"/> to <see cref="long.MaxValue"/>.
        /// </summary>
        public static IEnumerable<long> LongsPositives {
            get {
                for (long i = 1; i < long.MaxValue; i++)
                    yield return i;
                yield return long.MaxValue;
            }
        }

        /// <summary>
        /// Iterate from <see cref="long.MinValue"/> to <see cref="long.MaxValue"/>.
        /// </summary>
        public static IEnumerable<long> LongsPositivesWithZero {
            get {
                for (long i = 0; i < long.MaxValue; i++)
                    yield return i;
                yield return long.MaxValue;
            }
        }

        /// <summary>
        /// Iterate from <see cref="long.MinValue"/> to <see cref="long.MaxValue"/>.
        /// </summary>
        public static IEnumerable<long> LongsWithNegatives {
            get {
                for (long i = long.MinValue; i < long.MaxValue; i++)
                    yield return i;
                yield return long.MaxValue;
            }
        }

        /// <summary>
        /// Iterate from -1 to <see cref="long.MinValue"/>.
        /// </summary>
        public static IEnumerable<long> LongsNegatives {
            get {
                for (long i = -1; i > long.MinValue; i--)
                    yield return i;
            }
        }

        /// <summary>
        /// Iterate from 0 to <see cref="long.MinValue"/>.
        /// </summary>
        public static IEnumerable<long> LongsNegativesWithZero {
            get {
                for (long i = 0; i > long.MinValue; i--)
                    yield return i;
            }
        }
    }
}
